#include <iostream>
#include <string>

using namespace std;
#define MAXSIZE 5

typedef struct
{
	int nSortList[MAXSIZE] = { 1,3,4,2,5 };//{ 12,9,1,11,5,8,3,7,4,10,6,2 }
	int nlength = MAXSIZE;
}CSqList;

void My_Swap(int &a, int &b);
int Merge_Sort(CSqList &sq, int L, int R);
int Merge(CSqList &sq, int L, int M, int R);

int main(void)
{
	CSqList tSL;
	int small_sum;
	for (int i = 0; i < MAXSIZE; i++)
		cout << tSL.nSortList[i] << ' ';
	cout << endl;
	//归并排序
	//采用分治策略，假设两个子序列有序，对其进行合并
	//一般采用递归调用实现
	int mid;
	mid = (tSL.nlength - 1) / 2;
	small_sum = Merge_Sort(tSL, 0, tSL.nlength - 1);
	for (int i = 0; i < MAXSIZE; i++)
		cout << tSL.nSortList[i] << ' ';
	cout << endl;
	cout << small_sum << endl; //输出小和

	return 0;
}
//归并排序递归函数
int Merge_Sort(CSqList &sq, int L, int R)
{
	int mid;
	if (L == R)
		return 0;
	mid = L + (R-L) / 2;
	return Merge_Sort(sq, L, mid) + Merge_Sort(sq, mid + 1, R) + Merge(sq, L, mid, R);
}
//归并过程
int Merge(CSqList &sq, int L, int M, int R)
{
	int temp[MAXSIZE];
	int i = 0;
	int res = 0;
	int *p1 = sq.nSortList;
	int *p2 = sq.nSortList;
	p1 = p1 + L;            //初始化指针
	p2 = p2 + M + 1;
	//开始合并
	while (p1 <= &sq.nSortList[M] && p2 <= &sq.nSortList[R])
	{
		res += *p1 < *p2 ? *p1 * (&sq.nSortList[R] - p2 + 1) : 0;//计算小和
		temp[i++] = *p1 < *p2 ? *p1++ : *p2++;
	}
		
	while (p1 <= &sq.nSortList[M])
		temp[i++] = *p1++;
	while (p2 <= &sq.nSortList[R])
		temp[i++] = *p2++;
	for (int j = 0; j < i; j++)
		sq.nSortList[L++] = temp[j];

	return res;
}
//交换元素
void My_Swap(int &a, int &b)
{
	int temp;
	temp = a;
	a = b;
	b = temp;
}
