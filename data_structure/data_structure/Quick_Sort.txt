#include <iostream>
#include <string>

using namespace std;
#define MAXSIZE 12

typedef struct
{
	int nSortList[MAXSIZE] = { 10,1,11,2,7,4,2,1,3,5,6,1 };
	int nlength = MAXSIZE;
}CSqList;

void My_Swap(int &a, int &b);
void Partition(CSqList &sq, int* ei, int L, int R);
void Quick_Sort(CSqList &sq, int L, int R);

int main(void)
{
	CSqList tSL;
	for (int i = 0; i < MAXSIZE; i++)
		cout << tSL.nSortList[i] << ' ';
	cout << endl;
    //快速排序，优化partition过程
	Quick_Sort(tSL, 0, MAXSIZE - 1);
	for (int i = 0; i < MAXSIZE; i++)
		cout << tSL.nSortList[i] << ' ';
	cout << endl;
	return 0;
}
//快排递归过程
void Quick_Sort(CSqList &sq, int L, int R)
{
	if (L >= R)
		return;
	/**********优化快排*****************/
	int mid = (R + L) / 2;
	if (sq.nSortList[L] > sq.nSortList[R])
		My_Swap(sq.nSortList[L], sq.nSortList[R]);
	if (sq.nSortList[mid] < sq.nSortList[L])
		My_Swap(sq.nSortList[mid], sq.nSortList[L]);
	if (sq.nSortList[mid] < sq.nSortList[R])
		My_Swap(sq.nSortList[mid], sq.nSortList[R]);
	/***********************************/
	int equal_index[2];
	Partition(sq,equal_index,L,R);
	Quick_Sort(sq, L, equal_index[0] - 1);//对上一次partition过程的小区进行partition
	Quick_Sort(sq, equal_index[1] + 1, R);//对上一次partition过程的大区进行partition
}
//核心Partition过程
void Partition(CSqList &sq,int* ei, int L, int R)
{
	int *p1 = sq.nSortList + L - 1;//指向小区最右边，小区初始化为待排序区域最左的前一个位置
	int *p2 = sq.nSortList + R;    //指向大区最左边，大区初始化为待排序区域最右的位置
	int *p3 = sq.nSortList + L;    //指向当前遍历值。
	while (p3 < p2)  //p3=p2时说明遍历完一遍
	{
		if (*p3 < sq.nSortList[R]) //以最右端的值为比较阈值
			My_Swap(*p3++, *(++p1));//交换当前值与小区的右边一个值，小区向右扩一位，遍历指针移向下一位
		else if (*p3 > sq.nSortList[R])
			My_Swap(*p3, *(--p2));  //交换当前值与大区的左边一个值，大区向左扩一位，遍历指针不动
		else
			p3++;                   //如果相等则遍历指针移向下一位
	}
	My_Swap(*p2, sq.nSortList[R]);  //将最右的比较阈值与大区的最左位的值交换
	//相等区域的值已经排序好，后续过程无需参加排序过程
	//返回相等区域位置
	*ei = p1 - sq.nSortList + 1;    //相等区第1位
	*(ei + 1) = p2 - sq.nSortList;  //相等区最后一位
}
//原位交换元素
void My_Swap(int &a, int &b)
{
	int temp;
	temp = a;
	a = b;
	b = temp;
}
